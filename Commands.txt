python manage.py shell

python manage.py makemigrations
python manage.py migrate

python manage.py createsuperuser

python manage.py runserver 127.0.0.1:8080



CONFIGURATION COMMANDS

- For running locally with Heroku:
python manage.py collectstatic
heroku local web -f Procfile.windows

- if collectstatic fails:
heroku config:set DEBUG_COLLECTSTATIC=1


### FOR PRODUCTION
PUSH TO HEROKU

git commit -am "comments"

git push heroku master
ou
git push heroku development-branch:master

- check in the Databases, "Sites"
- check Google and FB domains in their consoles




localtunnel
lt --port 8080 --subdomain reset-challenge-30d






acessoria.marcelasiqueira@gmail.com
moreira97



#Send Docker to AWS
## test (build das imagens de acordo com o Dockerfile)
docker-compose up -d --build
# Resultado sao duas imagens e um composto de dois containers rodando que funciona
docker-compose down

##Login
aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin 322502383001.dkr.ecr.sa-east-1.amazonaws.com
##Tag imagens
docker tag reset-challenge:latest 322502383001.dkr.ecr.sa-east-1.amazonaws.com/reset-challenge
docker tag postgres:latest 322502383001.dkr.ecr.sa-east-1.amazonaws.com/postgres:latest
##Push docker image pro ECR
docker push 322502383001.dkr.ecr.sa-east-1.amazonaws.com/reset-challenge:latest
docker push 322502383001.dkr.ecr.sa-east-1.amazonaws.com/postgres:latest

# Contruir o JSON do Task Definition da mesma maneira que está o docker-compose (ta no fim desse arquivo)
# Basicamente esse Task é o q pega as imagens e define o comando do django pra abrir a porta

# Deploy pelo Custer/Service - define LoadBalancer (onde vai ta o endpoint)
# É onde se cria um servico longo, onde o task é executado e a porta exposta ao Loadbancer,
# com DNS publico



docker context create ecs --local-simulation ecsLocal
docker context use ecsLocal
docker compose up


## Context (changes where docker points the build, default is local)
docker context create ecs context-name  (use access and secret keys, or profile)
docker compose up -c context-name


(aws ecr get-login-password --region sa-east-1) | docker login --password-stdin --username AWS 322502383001.dkr.ec
r.sa-east-1.amazonaws.com/ecsworker


docker compose up




JSON TASK DEFINITION

{
  "ipcMode": null,
  "executionRoleArn": null,
  "containerDefinitions": [
    {
      "dnsSearchDomains": null,
      "environmentFiles": null,
      "logConfiguration": null,
      "entryPoint": null,
      "portMappings": [],
      "command": null,
      "linuxParameters": null,
      "cpu": 0,
      "environment": [
        {
          "name": "POSTGRES_DB",
          "value": "d70b90u9f6om4h"
        },
        {
          "name": "POSTGRES_PASSWORD",
          "value": "c8432332aaaf015c02045f817d923341c43b038035c6e57abe118a170a2fce59"
        },
        {
          "name": "POSTGRES_USER",
          "value": "kpxrkzhcjvwaca"
        }
      ],
      "resourceRequirements": null,
      "ulimits": null,
      "dnsServers": null,
      "mountPoints": [],
      "workingDirectory": null,
      "secrets": null,
      "dockerSecurityOptions": null,
      "memory": 128,
      "memoryReservation": null,
      "volumesFrom": [],
      "stopTimeout": null,
      "image": "322502383001.dkr.ecr.sa-east-1.amazonaws.com/postgres:latest",
      "startTimeout": null,
      "firelensConfiguration": null,
      "dependsOn": null,
      "disableNetworking": null,
      "interactive": null,
      "healthCheck": null,
      "essential": false,
      "links": null,
      "hostname": null,
      "extraHosts": null,
      "pseudoTerminal": null,
      "user": null,
      "readonlyRootFilesystem": null,
      "dockerLabels": null,
      "systemControls": null,
      "privileged": null,
      "name": "DB"
    },
    {
      "dnsSearchDomains": null,
      "environmentFiles": null,
      "logConfiguration": null,
      "entryPoint": null,
      "portMappings": [
        {
          "hostPort": 8080,
          "protocol": "tcp",
          "containerPort": 80
        }
      ],
      "command": [],
      "linuxParameters": null,
      "cpu": 0,
      "environment": [],
      "resourceRequirements": null,
      "ulimits": null,
      "dnsServers": null,
      "mountPoints": [],
      "workingDirectory": null,
      "secrets": null,
      "dockerSecurityOptions": null,
      "memory": 128,
      "memoryReservation": null,
      "volumesFrom": [],
      "stopTimeout": null,
      "image": "322502383001.dkr.ecr.sa-east-1.amazonaws.com/reset-challenge:latest",
      "startTimeout": null,
      "firelensConfiguration": null,
      "dependsOn": [
        {
          "containerName": "DB",
          "condition": "START"
        }
      ],
      "disableNetworking": null,
      "interactive": null,
      "healthCheck": null,
      "essential": true,
      "links": null,
      "hostname": null,
      "extraHosts": null,
      "pseudoTerminal": null,
      "user": null,
      "readonlyRootFilesystem": null,
      "dockerLabels": null,
      "systemControls": null,
      "privileged": null,
      "name": "RM"
    }
  ],
  "placementConstraints": [],
  "memory": "300",
  "taskRoleArn": null,
  "compatibilities": [
    "EC2"
  ],
  "taskDefinitionArn": "arn:aws:ecs:sa-east-1:322502383001:task-definition/ResetMethod-task:13",
  "family": "ResetMethod-task",
  "requiresAttributes": [
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "com.amazonaws.ecs.capability.ecr-auth"
    },
    {
      "targetId": null,
      "targetType": null,
      "value": null,
      "name": "ecs.capability.container-ordering"
    }
  ],
  "pidMode": null,
  "requiresCompatibilities": [
    "EC2"
  ],
  "networkMode": null,
  "cpu": "200",
  "revision": 13,
  "status": "ACTIVE",
  "inferenceAccelerators": null,
  "proxyConfiguration": null,
  "volumes": []
}