python manage.py shell

python manage.py makemigrations
python manage.py migrate

python manage.py createsuperuser

python manage.py runserver 127.0.0.1:8080



CONFIGURATION COMMANDS

- For running locally with Heroku:
python manage.py collectstatic
heroku local web -f Procfile.windows

- if collectstatic fails:
heroku config:set DEBUG_COLLECTSTATIC=1


### FOR PRODUCTION
PUSH TO HEROKU

git commit -am "comments"

git push heroku master
ou
git push heroku development-branch:master

- check in the Databases, "Sites"
- check Google and FB domains in their consoles




localtunnel
lt --port 8080 --subdomain reset-challenge-30d






acessoria.marcelasiqueira@gmail.com
moreira97



#Send Docker to AWS
## test (build das imagens de acordo com o Dockerfile)
docker-compose up -d --build
# Resultado sao duas imagens e um composto de dois containers rodando que funciona
docker-compose down

##Login
aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin 322502383001.dkr.ecr.s
a-east-1.amazonaws.com
##Tag imagens
docker tag reset-challenge:latest 322502383001.dkr.ecr.sa-east-1.amazonaws.com/reset-challenge
docker tag postgres:latest 322502383001.dkr.ecr.sa-east-1.amazonaws.com/postgres:latest
##Push docker image pro ECR
docker push 322502383001.dkr.ecr.sa-east-1.amazonaws.com/reset-challenge:latest
docker push 322502383001.dkr.ecr.sa-east-1.amazonaws.com/postgres:latest

# Contruir o JSON do Task Definition da mesma maneira que está o docker-compose (ta no fim desse arquivo)
# Basicamente esse Task é o q pega as imagens e define o comando do django pra abrir a porta

# Deploy pelo Custer/Service - define LoadBalancer (onde vai ta o endpoint)
# É onde se cria um servico longo, onde o task é executado e a porta exposta ao Loadbancer,
# com DNS publico



docker context create ecs --local-simulation ecsLocal
docker context use ecsLocal
docker compose up


## Context (changes where docker points the build, default is local)
docker context create ecs context-name  (use access and secret keys, or profile)
docker compose up -c context-name


(aws ecr get-login-password --region sa-east-1) | docker login --password-stdin --username AWS 322502383001.dkr.ec
r.sa-east-1.amazonaws.com/ecsworker


docker compose up




JSON

{
    "requiresCompatibilities": [
        "FARGATE"
    ],
    "containerDefinitions": [
        {
            "name": "RC",
            "image": "322502383001.dkr.ecr.sa-east-1.amazonaws.com/reset-challenge:latest",
            "resourceRequirements": null,
            "essential": true,
            "portMappings": [
                {
                    "containerPort": "80",
                    "protocol": "tcp"
                }
            ],
            "command": [
                "python manage.py runserver 0.0.0.0:80"
            ],
            "environment": null,
            "environmentFiles": [],
            "secrets": null,
            "mountPoints": null,
            "volumesFrom": null,
            "hostname": null,
            "user": null,
            "workingDirectory": "/code2/",
            "extraHosts": null,
            "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "/ecs/RCfinalTask",
                    "awslogs-region": "sa-east-1",
                    "awslogs-stream-prefix": "ecs"
                }
            },
            "ulimits": null,
            "dockerLabels": null,
            "dependsOn": null,
            "repositoryCredentials": {
                "credentialsParameter": ""
            }
        },
        {
            "name": "postgres",
            "image": "322502383001.dkr.ecr.sa-east-1.amazonaws.com/postgres:latest",
            "resourceRequirements": null,
            "essential": true,
            "portMappings": [],
            "environment": [
                {
                    "name": "POSTGRES_DB",
                    "value": "d70b90u9f6om4h"
                },
                {
                    "name": "POSTGRES_USER",
                    "value": "kpxrkzhcjvwaca"
                },
                {
                    "name": "POSTGRES_PASSWORD",
                    "value": "c8432332aaaf015c02045f817d923341c43b038035c6e57abe118a170a2fce59"
                }
            ],
            "environmentFiles": [],
            "secrets": null,
            "mountPoints": null,
            "volumesFrom": null,
            "hostname": null,
            "user": null,
            "workingDirectory": null,
            "extraHosts": null,
            "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "/ecs/RCfinalTask",
                    "awslogs-region": "sa-east-1",
                    "awslogs-stream-prefix": "ecs"
                }
            },
            "ulimits": null,
            "dockerLabels": null,
            "dependsOn": null
        }
    ],
    "volumes": [],
    "networkMode": "awsvpc",
    "memory": "512",
    "cpu": "256",
    "executionRoleArn": "arn:aws:iam::322502383001:role/ecsTaskExecutionRole",
    "family": "RCfinalTask",
    "taskRoleArn": "arn:aws:iam::322502383001:role/ecsTaskExecutionRole",
    "placementConstraints": [],
    "tags": []
}